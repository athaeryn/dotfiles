#!/usr/bin/env ruby

require 'yaml'
require 'pathname'

class Vimanage
    def initialize command
        initial_setup

        @file_path = File.dirname(Pathname.new(__FILE__).realpath) + "/"

        @files = {
            "plugins" => "vimanage-plugins"
        }

        @files.keys.each do |key|
            @files[key] = @file_path + @files[key]
        end

        @plugins = load_plugins

        Dir.chdir(File.expand_path "~/.vim/bundle")
        @installed = Dir.glob '*'

        parse_command command if command.size > 0
    end

    def initial_setup
        system("mkdir -p ~/.vim/autoload ~/.vim/bundle")
        system("mkdir -p ~/.vim/bundle/bclose/plugin")

        #Check for Bclose
        unless File.exist?(File.expand_path('~/.vim/bundle/bclose/plugin/bclose.vim'))
            print "Bclose script not found. Installing... "
            system("cp #{@file_path}bclose.vim ~/.vim/bundle/bclose/plugin/bclose.vim")
            print "done.\n"
        end

        #Check for pathogen
        unless File.exist?(File.expand_path "~/.vim/autoload/pathogen.vim")
            print "Pathogen not found. Installing...\n"
            system("curl 'www.vim.org/scripts/download_script.php?src_id=16224' > ~/.vim/autoload/pathogen.vim")
            puts "done."
        end
    end

    def load_plugins
        YAML.load_file(@files["plugins"]) || []
    end

    def save_plugins
        File.open(@files["plugins"], "w") do |f|
            f.write(YAML.dump(@plugins.sort))
        end
    end

    def add_plugin which
        if @plugins.include? which
            puts "You already have #{which}."
        else
            repo = "https://github.com/#{which}"
            #Check to see if this is actually a repo
            response = `curl -sI #{repo}`
            if response.include?('200 OK') && which.match(/\w+\/\w+/)
                puts "Adding #{which}..."
                install_plugin which
                @plugins << which
            else
                puts "#{repo} is not a repository."
            end
        end
    end

    def remove_plugin which
        if @plugins.include? which
            puts "Removing #{which}..."
            uninstall_plugin which
            @plugins.delete which
        else
            puts "#{which} is not installed."
        end
    end

    def bundle_path which
        File.expand_path "~/.vim/bundle/#{which.split('/')[1]}"
    end

    def install_plugin which
        unless @installed.include? which
            puts "Installing #{which}..."
            system("git clone https://github.com/#{which}.git #{bundle_path which}")
            puts
        end
    end

    def uninstall_plugin which
        if @installed.include? which.split('/')[1]
            puts "Uninstalling #{which}..."
            system("rm -rf #{bundle_path which}")
            puts
        else
            puts "#{which} is not installed!"
        end
    end

    def update_plugin which
        if which === true
            puts "Updating all plugins.\n\n"
            @plugins.each do |plugin|
                update_plugin plugin
                puts
            end
        else
            if @plugins.include? which
                puts "Updating #{which}..."
                installed = Dir.exist?(bundle_path(which))
                if installed
                    system("cd #{bundle_path which} ; git pull ")
                else
                    puts "#{which} is not installed."
                    install_plugin which
                end
            else
                puts "#{which} is not installed."
            end
        end
    end

    def plugin_names
        @plugins.map do |p|
            p.split('/')[1]
        end
    end

    def list_plugins managed
        not_vimanaged = @installed - plugin_names
        if not_vimanaged.size > 0 && managed != "managed"
            puts @plugins
            puts "\n## Not managed ##"
            puts not_vimanaged
        else
            puts @plugins
        end
    end

    def parse_command command
        case command.shift
        when "list"
            if command[0] == "--managed-only"
                list_plugins "managed" 
            else
                list_plugins "all"
            end
        when "remove"
            if command.size > 0
                remove_plugin command[0]
                save_plugins
            else
                puts "Remove what?"
            end
        when "add"
            if command.size > 0
                add_plugin command[0]
                save_plugins
            else
                puts "Add what?"
            end
        when "update"
            # true means update erytang
            update_plugin(command.size == 0 ? true : command[0])
        end
    end
end

Vimanage.new ARGV
